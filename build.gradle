plugins {
    id 'java'
    id 'idea'
    id 'application'
    id 'eclipse'
}

group = "de.uni_passau.fim.infosun.prophet"
version = "1.0.0"

sourceCompatibility = '11'
targetCompatibility = '11'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

javadoc {
    options.setEncoding 'UTF-8'
}

sourceSets {
    main {
        java {
            srcDir 'src'
        }
        resources {
            srcDir 'res'
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.fifesoft:rsyntaxtextarea:2.5.6'
    implementation 'com.sun.mail:javax.mail:1.5.2'
    implementation 'net.sf.opencsv:opencsv:2.3'
    implementation('com.io7m.xom:xom:1.2.10') {
        transitive = false // we only need xom.jar, see http://www.xom.nu/faq.xhtml#d0e213
    }
    implementation 'com.thoughtworks.xstream:xstream:1.4.8'
    implementation 'org.jsoup:jsoup:1.8.1'
}

idea.module {
    downloadJavadoc = true
    downloadSources = true
}

eclipse.classpath {
    downloadJavadoc = true
    downloadSources = true
}

def projInstallDir = file("$buildDir/install/${project.name}")
def projBinDir = file("$projInstallDir/bin")

def editorMainClass = "${group}.experimentEditor.ExperimentEditor"
def viewerMainClass = "${group}.experimentViewer.EViewer"

task editor(type: JavaExec) {
    group 'Execution'
    description 'Runs the experiment editor.'
    main = editorMainClass
    classpath sourceSets.main.runtimeClasspath

    doLast {
        if (projBinDir.exists() || projBinDir.mkdirs()) {
            workingDir projBinDir
        } else {
            logger.warn("Could not create the working directory ${projBinDir}. Using the project directoy.")
        }
    }
}

task viewer(type: JavaExec) {
    group 'Execution'
    description 'Runs the experiment viewer.'
    main = viewerMainClass
    classpath sourceSets.main.runtimeClasspath

    doLast {
        if (projBinDir.exists() || projBinDir.mkdirs()) {
            workingDir projBinDir
        } else {
            logger.warn("Could not create the working directory ${projBinDir}. Using the project directoy.")
        }
    }
}

application {
    applicationName = project.name
    mainClassName = editorMainClass
}

def viewerStartScripts = task viewerStartScripts(type: CreateStartScripts) {
    applicationName = "ProphetViewer"
    mainClassName = viewerMainClass
    classpath = startScripts.classpath
    outputDir = startScripts.outputDir
}

installDist.dependsOn(viewerStartScripts)